'''
agent Accounting
'''
import ast
import asyncio
import pandas as pd

from api.core_and_router import Core


# создаем class accounting
class Accounting(Core):
    # прописываем роль модели для заполнения таблицы, версию и температуру
    system_for_accounting = '''
    Ты — великолепный сотрудник финансового отдела торговой компании 'Фэмили'. Компания 
    занимается реализацией одежды, игрушек и закусками.  У тебя отлично получается извлекать 
    и классифицировать важные сущности из сообщений о движении денежных средств. \n\n

    Пожалуйста, извлеки только 5 важных сущности из сообщения.
    Ознакомся с кратим содержанием, чтобы быть в контексте.
    Используй предоставленную документацию для определения статьи.
    Строго придерживайся формата данных - Python список:
    ['дата', сумма, счёт, 'контрагент', 'статья'] \n\n

    Ты знаешь что:
    1. Денежные потоки от операционной деятельности
    1.1. Продажи через торговые точки
    Описание: Выручка от продажи товаров через физические магазины и киоски. 
    Мы продаем и реализуем товары физическим лицам или покупателям, которые приходят 
    в наши торговый точки.

    1.2. Продажи через вендинговые автоматы
    Описание: Выручка от автоматизированных систем продаж (вендинговых аппаратов). 
    Физические лица или покупатели пользуются нашими автоматами по продажам.

    1.3. Возвраты от поставщиков
    Описание: Суммы, полученные от поставщиков за возвращенный товар. Полученные суммы 
    от наших поставщиков за некачественный товар. 

    1.4. Закупка товара
    Описание: Оплата товаров для перепродажи. Покупка товаров у наших поставщиков для 
    торговли через торговые точки или автоматы.

    1.5. Транспортные услуги
    Описание: Расходы на доставку товаров и документов. Все уплаты связанные с 
    логистикой товаров от наших партнеров и поставщиков. Аренда транспорта для доставки 
    товаров.

    1.8. Расчётно-кассовое обслуживание (РКО)
    Описание: Расходы на обслуживание расчетного счета компании. Комиссии за эквайринг.

    1.9. Налоги (ЕНВД, УСН 6%, транспортный налог)
    Описание: Обязательные платежи в бюджет государства.

    1.10. Зарплаты и налоги(НДФЛ, ПФР) производственного персонала
    Описание: Расходы на оплату труда и связанные с этим обязательства для 
    производственного, рабочего персонала.

    1.11. Зарплаты и налоги(НДФЛ, ПФР) коммерческого персонала
    Описание: Расходы на оплату труда и связанные с этим обязательства для коммерческого 
    персонала. 

    1.12. Зарплаты и налоги(НДФЛ, ПФР) административного персонала
    Описание: Расходы на оплату труда и связанные с этим обязательства для 
    административного персонала.

    1.13. Обучение персонала
    Описание: Инвестиции в профессиональное развитие сотрудников. Оплата подписок на 
    Skillbox и другие учебные платформы. Оплата семинаров для сотрудников.

    1.14. Расходы на персонал
    Описание: Социальные и мотивационные затраты на сотрудников. Корпоративы и годовщины 
    компании. Подарки сотрудницам и сотрудникам. Расходы на праздники. Аренда помещении 
    для праздников. Покупка рабочей одежды и формы для персонала. Плановые медосмотры.

    1.15. Командировочные расходы
    Описание: Расходы, связанные с деловыми поездками сотрудников.

    1.16. Представительские расходы
    Описание: Расходы на поддержание деловых отношений с партнерами.

    1.17. Поиск и найм персонала
    Описание: Расходы на привлечение новых сотрудников. Оплата подписок на hh, SuperJob 
    и другие.

    1.18. Реклама и маркетинг
    Описание: Расходы на продвижение бизнеса.

    1.19. Содержание торговых точек и офиса
    Описание: Расходы на поддержание рабочих помещений. Закупка концелярии в офис. Покупки
    воды для кулеров. Уборка магазинов и офиса.

    1.20. Аренда офиса и магазинов
    Описание: Платежи за использование недвижимости.

    1.21. Покупка наличности
    Описание: Комиссии за снятие наличных денег в банкоматах или банках для нужд компании. 

    1.22. Прочие операционные расходы
    Описание: Мелкие расходы(сумма ниже 10000), не вошедшие в другие статьи. Эта статья всегда 
    выбирается если остальные не подходят.

    2. Денежные потоки от инвестиционной деятельности
    2.1. Покупка основных средств (ОС)
    Описание: Приобретение дорогостоящего (сумма свыше 40000) имущества и оборудования для ведение 
    бизнеса работающего дольше года.

    2.2. Ремонт основных средств
    Описание: Капитальный ремонт, увеличивающий срок службы дорогостоящего имущества. Ремонт 
    дорогостоящего оборудования.

    2.3. Продажа основных средств
    Описание: Доходы от реализации дорогостоящего имущества отработавщего дольше года.

    2.4. Выдача кредитов и займов
    Описание: Деньги которые мы предоставили третьим лицам - сотрудникам, поставщикам, 
    партнерам.

    2.5. Возврат кредитов и займов
    Описание: Поступления от погашения долгов. Деньги которые нам вернули третьи лица - 
    сотрудники, сотрудницы, поставщики, партнеры.

    3. Денежные потоки от финансовой деятельности
    3.1. Получение кредитов и займов
    Описание: Привлеченные заемные средства. Деньги которые предоставили и предоставляют 
    нам банки, поставщики, партнеры.

    3.2. Оплаты по кредитам, займам и овердрафту
    Описание: Погашение долговых обязательств. Деньги, кредиты, займы которые мы 
    возвращаем банкам, поставщикам, партнерам. 

    3.3. Вклады от собственников
    Описание: Деньги, вложенные учредителями в бизнес и его развитие. 

    3.4. Дивиденды
    Описание: Выплаты собственникам. 

    3.5. Прочие поступления от финансовых операций
    Описание: Доходы от финансовых активов(облигации). Проценты или дивиденды полученные от вложения 
    в другие компании. Проценты по остаткам на счетах. 

    Технические операции
    4.1. Перевод между счетами компании
    Описание: Перевод денег на другой наш счет, карту или кошелёк.
    \n\n
    '''
    model_for_accounting = 'gpt-4.1-mini-2025-04-14'
    temperature_for_accounting = 0
    verbose_for_accounting = 0 

    # конструктор
    def __init__(self, note, summary, client):
        self.note = note
        self.summary = summary
        self.client = client
        # наследование аргументов из класса Core
        super().__init__(
            system = self.system_for_accounting, 
            model = self.model_for_accounting, 
            temperature = self.temperature_for_accounting, 
            verbose = self.verbose_for_accounting)

    FILE_PATH = 'api/content/journal_of_operations.csv'
    
    async def load_df(self):
        try:
            return await asyncio.to_thread(pd.read_csv, self.FILE_PATH)
        except:
            return pd.DataFrame(columns=['note', 'date', 'sum', 'account', 
                                         'counterparty', 'category'])

    async def save_df(self, df):
        await asyncio.to_thread(df.to_csv, self.FILE_PATH, index=False)

    async def append_to_df(self, lst, note):
        df = await self.load_df()
        index_row = len(df)
        df.loc[index_row] = {
            'note':note,
            'date':lst[0],
            'sum':int(lst[1]),
            'account':int(lst[2]),
            'counterparty':str(lst[3]),
            'category':str(lst[4])
        }
        await self.save_df(df)

    # функция активации
    async def activate(self):
        df = await self.load_df()

        user_for_accounting = f'''
        Давай действовать последовательно:

        Шаг 1: Извлекай дату операции из сообщения. Если дата указана — добавляй её в
        список в формате ДД.ММ.ГГГГ. Если дата в сообщении отсутствует — ставь «-».

        Шаг 2: Извлекай сумму средств из сообщения. В случае покупки наличности укажи 
        размер комиссии. Если сумма указана — добавляй её в список в виде 
        положительного числа. Если сумма в сообщении отсутствует — ставь «-».

        Шаг 3: Извлекай счёт или номер карты из сообщения. Если счёт указан — вноси в 
        список последние четыре цифры счёта. Если счёт в сообщении отсутствует — ставь 
        «-».

        Шаг 4: Извлекай лишь наименование организации контрагента или ФИО контрагента. 
        В случае с переводм средств на другой счет укажи на какой счет или номер карты 
        был получен перевод. В случае с продажами через торговые точки и продажами через 
        вендинговые автоматы укажи название контрагента 'Фэмили'. 
        Если наименование организации или контрагента указано в сообщении —
        вноси лишь его наименование в список без точки. Если наименование контрагента или 
        название организации контрагента отсутствует — ставь «-».

        Шаг 5: Определи финансовую статью на основании предыдущих шагов. Если удаётся 
        определить статью — точно внеси её полное название(оно стоит после цифр) 
        точно так, как указано в документации. Не добавляй ничего кроме названия статьи. 
        Если определить статью невозможно — ставь «-».

        Шаг 6. Выведи полученный Python список из 5 сущностей(элементов списка). \n\n

        Сообщение: {self.note} \n
        Контекст: {self.summary} \n\n
        Ответ:
        '''

        assistant = '''
        ['25.08.2025', 52000, 3123, 'Фэмили', 'Продажи через торговые точки']
        '''
        messages = [
            {'role':'system','content':self.system},
            {'role':'user','content':user_for_accounting},
            {'role':'assistant', 'content':assistant}
            ]

        completion = await self.client.chat.completions.create(
            model = self.model,
            messages = messages,
            temperature = self.temperature
        )

        answer = completion.choices[0].message.content

        if self.verbose:
            print('\n accounting: \n', answer)

        # обработчик ошибок
        try:
            result = ast.literal_eval(answer)
            if not isinstance(result, list):
                result = 'Error - it is not list'
        except (ValueError, SyntaxError):
            result = 'Error - accounting can not convert'

        # значения флага по умолчанию
        was_written_to_sheet = False

        # условие по определению полноты данных, если все данные получены происходит
        # запись данных в таблицу
        if result.count('-') == 0:
            # добавляем в контекст в заметку
            self.summary += self.note
            await self.append_to_df(result, self.summary)
            # изменяем значение флага
            was_written_to_sheet = True

        return result, was_written_to_sheet